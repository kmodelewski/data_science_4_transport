{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Course Introduction","text":""},{"location":"empty/","title":"empty","text":""},{"location":"1-Lakehouse/1_0_MedalionArchitecture/","title":"2.Medalion Architecture","text":""},{"location":"1-Lakehouse/1_0_MedalionArchitecture/#analytics-platforms","title":"Analytics Platforms","text":"<p>Data Lake (storage, external storage + warehouse (plus sql endpoint))</p> <p>Snowflake, Databricks, MS Fabric</p>"},{"location":"1-Lakehouse/1_1_AnalyticsPlatforms/","title":"3.Analytics Platforms","text":""},{"location":"1-Lakehouse/1_1_AnalyticsPlatforms/#analytics-platforms","title":"Analytics Platforms","text":"<p>Snowflake, Databricks, MS Fabric</p>"},{"location":"1-Lakehouse/1_2_DeltaLake/","title":"4.Delta Lake","text":""},{"location":"1-Lakehouse/1_2_DeltaLake/#delta-lake-standard","title":"Delta Lake Standard","text":"<ol> <li>Data Lake - scala</li> </ol>"},{"location":"1-Lakehouse/1_Lakehouse/","title":"1.Lakehouse","text":""},{"location":"1-Lakehouse/1_Lakehouse/#definitions","title":"Definitions","text":"<ol> <li>Data Lake - scalable storage repositories (HDFS, Cloud e.g. ADSL Gen 2) that hold raw data. There are file based system that work on clusters</li> <li>Data Warehouse - storage for structured (tabular) data. Usually scaled up to one single machine. The lack of ACID. Poorly suited of BI queries, slow in perfomance.</li> <li>Lakehouse - or data lakehouse - Combines best from Data Lake and Data Warehouse</li> <li>Delta lake - storage layer for lakehouse based on open standard Delta Lake (parquet data files  with file-based transatcion log for ACID transactions)</li> <li>Databricks - Unified platform built on Lakehouse Architecture with default format: Delta Delta official</li> </ol> ACID <p>Atomicity (all transactions complete with success of complete failure). Consistency (state of the data is the same for simultaneous operations).  Isolation (how simultaneous operations potentially confflic with one another - optimistic concurenncy control). Durability (commitet changes are permanent). </p> <p>Thanks to: write serializable isolation and optimistic concurenncy control</p>"},{"location":"1-Lakehouse/1_Lakehouse/#parallel-computing","title":"Parallel computing","text":"<p>Heavy workloads and growing business needs requires another aproach to computing. One mainframe computers are expensive and diffcult to upgrade. Below example of Apache spark architecture.</p> <p></p>"},{"location":"1-Lakehouse/1_Lakehouse/#transportation-use-cases","title":"Transportation Use Cases","text":"<ol> <li> <p>Daily reporting (Power BI, files)</p> </li> <li> <p>Real time management (bike sharing stations with ticketing system)</p> </li> <li> <p>Combine multiple data</p> </li> <li> <p>Data sharing </p> </li> <li>internal</li> <li>external</li> </ol>"},{"location":"2-Databricks/DB_PlatformArchitecture/","title":"1.Architecture","text":""},{"location":"2-Databricks/DB_PlatformArchitecture/#platform-description","title":"Platform Description","text":""},{"location":"2-Databricks/DB_PlatformArchitecture/#noteboook-environments","title":"Noteboook environments","text":""}]}